;-*-Lisp-*-

(require 'cask "/usr/local/Cellar/cask/0.7.0/cask.el")
(cask-initialize)
(require 'pallet)
(pallet-mode t)
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
(load-theme 'solarized-light t)
(projectile-global-mode)
(require 'ido)
(ido-mode t)
(defun set-tab-width (width)
  (interactive "nSet tab width: ")
  (setq tab-width width))

;; custom key bindings
(global-set-key (kbd "\C-ct") 'toggle-truncate-lines)

;; set up buf-move
(global-set-key (kbd "<C-S-up>")     'buf-move-up)
(global-set-key (kbd "<C-S-down>")   'buf-move-down)
(global-set-key (kbd "<C-S-left>")   'buf-move-left)
(global-set-key (kbd "<C-S-right>")  'buf-move-right)

;; set up pocket
;; (el-pocket-load-auth)
(global-set-key "\C-cf" 'twittering-favorite)

;; set file extensions
(add-to-list 'auto-mode-alist '("\\.ctp\\'" . php-mode))

;; Stop with dialog boxes

;; set up jump mode
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
(global-ace-isearch-mode +1)
;; set up apache file editing

  (add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
  (add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))
  (add-to-list 'auto-mode-alist '("srm\\.conf\\'"    . apache-mode))
  (add-to-list 'auto-mode-alist '("access\\.conf\\'" . apache-mode))
  (add-to-list 'auto-mode-alist '("sites-\\(available\\|enabled\\)/" . apache-mode))


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-use-fuzzy t)
 '(ag-executable "/usr/local/bin/ag")
 '(diary-file "~/Dropbox/orgfiles/diary")
 '(haml-indent-offset 3)
 '(ido-use-faces nil)
 '(magit-diff-use-overlays nil)
 '(magit-use-overlays nil)
 '(org-agenda-files (quote ("~/Dropbox/orgfiles")))
 '(org-default-notes-file "~/Dropbox/orgfiles/inbox.org")
 '(org-directory "~/Dropbox/orgfiles/")
 '(org-mobile-inbox-for-pull "~/Dropbox/Apps/MobileOrg/from-mobile.org")
 '(org-refile-targets
   (quote
    ((org-agenda-files :maxlevel . 9)
     (nil :maxlevel . 9))))
 '(rspec-command-options "--format documentation --drb")
 '(rspec-rake-command "rake")
 '(rspec-spec-command "rspec")
 '(rspec-use-bundler-when-possible t)
 '(rspec-use-rake-when-possible nil)
 '(rspec-use-rvm t)
 '(rspec-use-spring-when-possible t)
 '(ruby-test-rspec-options (quote ("-b -erb")))
 '(url-cookie-file "/Users/sergio/.emacs.d/url/cookies")
 '(url-history-file "/Users/sergio/.emacs.d/url/history")
 '(use-dialog-box nil)
 '(use-file-dialog nil)
 '(yas-global-mode t nil (yasnippet))
 '(yas-snippet-dirs
   (quote
    ("/Users/sergio/emacs_d/.cask/24.4.1/elpa/yasnippet-20150405.1526/snippets/" "/Users/sergio/emacs_d/snippets" yas-installed-snippets-dir)) nil (yasnippet)))




(require 'rvm)

;; ansi color
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; set up helm
(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(global-set-key (kbd "C-c h i") 'helm-semantic-or-imenu)
(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)

(setq global-ace-isearch-mode t)
;; Set up org mode

(define-key global-map "\C-cc" 'org-capture)

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(add-hook 'org-mode-hook 'turn-on-font-lock)

;; Set up mobile org
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg/")

(require 'org-journal)
(setq org-journal-dir "~/Dropbox/orgfiles/journal/")
(setq org-agenda-files (quote ("~/Dropbox/orgfiles")))
;; auto complete mode
;;(add-to-list 'load-path "~/.emacs.d/")
;;(require 'auto-complete-config)
;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/.cask/24.4.1/elpa/auto-complete-20150322.813/dict")
;;(ac-config-default)
;;(add-to-list 'ac-modes 'enh-ruby-mode)
;;(add-to-list 'ac-modes 'haml-mode)

;; set auto modes for enh-ruby-mode
;;(setq auto-mode-alist (cons '("\\.rake$" . enh-ruby-mode) auto-mode-alist))
;;(setq auto-mode-alist (cons '("Gemfile" . enh-ruby-mode) auto-mode-alist))

;; try out company mode for completion
(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
(add-hook 'after-init-hook 'global-company-mode)

;windmore
(require 'windmove)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
;; turn on truncate long lines
(toggle-truncate-lines t)

;; turn on highlight current line
(global-hl-line-mode 1)

;; magit status
(global-set-key (kbd "C-x g") 'magit-status)

;; set up flx-ido
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

;; turn off menu bar
(menu-bar-mode -1)
(tool-bar-mode -1)
;; set up line numbers on for source code files
(add-hook 'abg-code-modes-hook
          (lambda () (linum-mode 1))
          (lambda () (auto-fill-mode 0)))

(add-hook 'enh-ruby-mode-hook
          (lambda () (run-hooks 'abg-code-modes-hook)))

(add-hook 'nxhtml-mode-hook
          (lambda () (run-hooks 'abg-code-modes-hook)))

;; turn on column number
(setq column-number-mode t)
;; set up ispell
(setq ispell-program-name "/usr/local/bin/ispell")

;; projectile mode
(add-hook 'enh-ruby-mode-hook 'projectile-on)
(add-hook 'projectile-mode-hook 'projectile-rails-on)


;; set up rails mode
(global-set-key (kbd "C-c C-v")  'projectile-rails-find-view)
(global-set-key (kbd "C-c C-m")  'projectile-rails-find-model)
(global-set-key (kbd "C-c C-c")  'projectile-rails-find-controller)



;; automatically save buffers associated with files on buffer switch
;; and on windows switch
(defadvice switch-to-buffer (before save-buffer-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice other-window (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-up (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-down (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-left (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-right (before other-window-now activate)
  (when buffer-file-name (save-buffer)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#fdf6e3" :foreground "#657b83" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 130 :width normal :foundry "apple" :family "Source Code Pro"))))
 '(hackernews-link-face ((t (:foreground "gray55"))))
 '(info-title-4 ((t (:inherit default :weight bold)))))


(put 'dired-find-alternate-file 'disabled nil)

(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)
        (next-line)))

(global-set-key (kbd "C-;")  'comment-or-uncomment-region-or-line)
