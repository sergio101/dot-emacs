					;-*-Lisp-*-


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(require 'cask "/usr/local/Cellar/cask/0.7.2/cask.el")
(cask-initialize)
(require 'pallet)
(pallet-mode t)
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)

;; set up backup files
(setq backup-directory-alist `(("." . "~/.saves")))


(projectile-global-mode)
(require 'ido)
(ido-mode t)
(defun set-tab-width (width)
  (interactive "nSet tab width: ")
  (setq tab-width width))

;; custom key bindings
(global-set-key (kbd "\C-ct") 'toggle-truncate-lines)

;; set up buf-move
(global-set-key (kbd "<C-S-up>")     'buf-move-up)
(global-set-key (kbd "<C-S-down>")   'buf-move-down)
(global-set-key (kbd "<C-S-left>")   'buf-move-left)
(global-set-key (kbd "<C-S-right>")  'buf-move-right)

;; set up pocket
;; (el-pocket-load-auth)
(global-set-key "\C-cf" 'twittering-favorite)

;; set file extensions
(add-to-list 'auto-mode-alist '("\\.ctp\\'" . php-mode))

;; Stop with dialog boxes

;; set up jump mode
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
(global-ace-isearch-mode +1)
;; set up apache file editing

(add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
(add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  .  apache-mode))
(add-to-list 'auto-mode-alist '("srm\\.conf\\'"    . apache-mode))
(add-to-list 'auto-mode-alist '("access\\.conf\\'" . apache-mode))
(add-to-list 'auto-mode-alist '("sites-\\(available\\|enabled\\)/" . apache-mode))

;; set up executable files
(setq exec-path (append exec-path '("/usr/local/bin")))

;; set up emms
(add-to-list 'load-path "~/elisp/emms/")
(require 'emms-setup)
(emms-standard)
(emms-default-players)
(require 'emms-streams)



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-use-fuzzy t)
 '(ag-executable "/usr/local/bin/ag")
 '(custom-safe-themes
   (quote
    ("d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "f1ee3126c1aba9f3ba35bb6f17cb2190557f2223646fd6796a1eb30a9d93e850" "4f5bb895d88b6fe6a983e63429f154b8d939b4a8c581956493783b2515e22d6d" "11636897679ca534f0dec6f5e3cb12f28bf217a527755f6b9e744bd240ed47e1" default)))
 '(custom-theme-load-path nil t)
 '(diary-file "~/Dropbox/orgfiles/diary")
 '(ember-completion-system (quote helm))
 '(emms-player-list (quote (emms-player-mplayer-playlist emms-player-mplayer)))
 '(emms-player-mplayer-command-name "tsocks mplayer")
 '(emms-player-mplayer-playlist-command-name "tsocks mplayer")
 '(epg-gpg-program "/usr/local/bin/gpg")
 '(geeknote-command "/usr/local/bin/geeknote")
 '(haml-indent-offset 3)
 '(ido-use-faces nil)
 '(js-indent-level 2)
 '(ledger-binary-path "/usr/local/bin/ledger")
 '(magit-diff-use-overlays nil)
 '(magit-push-always-verify nil)
 '(magit-use-overlays nil)
 '(minitest-use-bundler nil)
 '(minitest-use-zeus-when-possible t)
 '(org-agenda-file-regexp "\\\\`[^.].*\\\\.org'\\\\|[0-9]+")
 '(org-agenda-files
   (quote
    ("~/Dropbox/orgfiles/PVTasks.org" "~/Dropbox/orgfiles/Someday.org" "~/Dropbox/Projects/FacebookSongDedication/pharo4_implement/PageDNA.org" "~/Dropbox/orgfiles/Home.org" "~/Dropbox/orgfiles/VillageBuzz.org" "~/Dropbox/orgfiles/TikTok.org" "~/Dropbox/orgfiles/OrgMode.org" "~/Dropbox/orgfiles/CoffeeBlack.org" "~/Dropbox/orgfiles/MorningToastAndJam.org" "~/Dropbox/orgfiles/LPSF.org" "~/Dropbox/orgfiles/Hewee.org" "/Users/sergio/Dropbox/orgfiles/inbox.org")))
 '(org-default-notes-file "~/Dropbox/orgfiles/inbox.org")
 '(org-directory "~/Dropbox/orgfiles/")
 '(org-export-with-author nil)
 '(org-journal-dir "~/Dropbox/orgfiles/journal/")
 '(org-md-headline-style (quote setext))
 '(org-mobile-inbox-for-pull "~/Dropbox/orgfiles/inbox.org")
 '(org-refile-targets
   (quote
    ((org-agenda-files :maxlevel . 9)
     (nil :maxlevel . 9))))
 '(package-selected-packages
   (quote
    (ac-emmet emmet-mode helm-emmet ruby-refactor handlebars-mode twittering-mode heroku coffee-mode hyperbole web-mode web-server yasnippet haml-mode ag helm-ag pov-mode company helm-rails magit magit-filenotify magit-popup magit-rockstar rvm projectile-rails pallet org-journal flymake-ruby flx-ido emms ace-isearch)))
 '(rspec-command-options "--format documentation --drb")
 '(rspec-rake-command "rake")
 '(rspec-spec-command "rspec")
 '(rspec-use-bundler-when-possible t)
 '(rspec-use-rake-when-possible nil)
 '(rspec-use-rvm t)
 '(rspec-use-spring-when-possible t)
 '(ruby-test-rspec-options (quote ("-b -erb")))
 '(url-cookie-file "/Users/sergio/.emacs.d/url/cookies")
 '(url-history-file "/Users/sergio/.emacs.d/url/history")
 '(use-dialog-box nil)
 '(use-file-dialog nil))


(require 'rvm)

;; ansi color
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; set up helm
(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(global-set-key (kbd "C-c h i") 'helm-semantic-or-imenu)
(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)

(setq global-ace-isearch-mode t)
;; Set up org mode

(setq org-directory "~/Dropbox/orgfiles/")
(setq org-default-notes-file (concat org-directory "/inbox.org"))

(define-key global-map "\C-cc" 'org-capture)

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(add-hook 'org-mode-hook 'turn-on-font-lock)

(setq org-log-done 'time)
(setq org-capture-templates
      (quote (("t" "todo" entry (file+headline (concat org-directory "/inbox.org") "Tasks")
               "* TODO %? %^G\n%U\n%a\n\n\n\n" :empty-lines 1)
              ("n" "note" entry (file (concat org-directory "/inbox.org"))
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              )))

(defun soft-wrap-lines ()
  "Make lines wrap at window edge and on word boundary, in current buffer."
  (interactive)
  (setq truncate-lines nil)
  (setq word-wrap t)
  )

(add-hook 'org-mode-hook 'soft-wrap-lines)


;; Set up mobile org
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg/")

(require 'org-journal)
(setq org-journal-dir "~/Dropbox/orgfiles/journal/")
(setq org-agenda-files (quote ("~/Dropbox/orgfiles")))


;; set auto modes for enh-ruby-mode
;;(setq auto-mode-alist (cons '("\\.rake$" . enh-ruby-mode) auto-mode-alist))
;;(setq auto-mode-alist (cons '("Gemfile" . enh-ruby-mode) auto-mode-alist))
(add-hook 'ruby-mode-hook 'linum-mode)
(add-hook 'enh-ruby-mode-hook 'linum-mode)
(add-hook 'php-mode 'linum-mode)
;; try out company mode for completion
(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
(add-hook 'after-init-hook 'global-company-mode)

					;windmore
(require 'windmove)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; turn on truncate long lines
(toggle-truncate-lines t)

;; turn on highlight current line
(global-hl-line-mode 1)

;; magit status
(global-set-key (kbd "C-x g") 'magit-status)

;; set up flx-ido
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

;; turn off menu bar
(menu-bar-mode -1)
(tool-bar-mode -1)
;; set up line numbers on for source code files
(add-hook 'abg-code-modes-hook
          (lambda () (linum-mode 1))
          (lambda () (auto-fill-mode 0)))

(add-hook 'enh-ruby-mode-hook
          (lambda () (run-hooks 'abg-code-modes-hook)))

(add-hook 'nxhtml-mode-hook
          (lambda () (run-hooks 'abg-code-modes-hook)))

(require 'flymake-ruby)
(add-hook 'ruby-mode-hook 'flymake-ruby-load)


;; turn on column number
(setq column-number-mode t)
;; set up ispell
(setq ispell-program-name "/usr/local/bin/ispell")

;; projectile mode
(add-hook 'enh-ruby-mode-hook 'projectile-on)
(add-hook 'projectile-mode-hook 'projectile-rails-on)
(projectile-rails-global-mode)


;; set up rails mode
(global-set-key (kbd "C-c C-v")  'projectile-rails-find-view)
(global-set-key (kbd "C-c C-m")  'projectile-rails-find-model)
(global-set-key (kbd "C-c C-c")  'projectile-rails-find-controller)


;; automatically save buffers associated with files on buffer switch
;; and on windows switch
(defadvice switch-to-buffer (before save-buffer-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice other-window (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-up (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-down (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-left (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-right (before other-window-now activate)
  (when buffer-file-name (save-buffer)))


(put 'dired-find-alternate-file 'disabled nil)

(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
	(setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)
    (next-line)))

(global-set-key (kbd "C-;")  'comment-or-uncomment-region-or-line)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(hackernews-comment-count-face ((t (:foreground "gray60"))))
 '(hackernews-link-face ((t (:foreground "gray51")))))


;; now, apply theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(set-face-attribute 'default nil :height 140)
(set-default-font "Source Code Pro")
(load-theme 'zenburn)



;; set up paths for latex/tex
(getenv "PATH")
(setenv "PATH"
	(concat
	 "/Library/TeX/texbin/" ":"

	 (getenv "PATH")))

(getenv "PATH")
(setenv "PATH"
	(concat
	 "/usr/local/bin/" ":"

	 (getenv "PATH")))

;; fixes the problem with the meta key in the command line

(set-keyboard-coding-system nil)
(put 'narrow-to-defun 'disabled nil)

;; add yasnippet
(setq yas-snippet-dirs
      '("~/.emacs.d/yasnippet-snippets"))
(require 'yasnippet)
(yas-global-mode 1)

;; emmet mode
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.

;; set tab width
(setq-default tab-width 3)

;; add markdown export to org
(eval-after-load "org"
  '(require 'ox-md nil t))
